declare type UseResourceContextParams = {
    name?: string;
    url?: string;
};
declare const useResourceContext: (params?: UseResourceContextParams) => {
    loading: any;
    loadingWrapper: (fn: () => void) => void;
    errors: any;
    setErrors: any;
    handleChange: (e: any) => void;
    handleErrors: (error: any) => void;
    resource: any;
    setResource: any;
    resources: any;
    setResources: any;
    findOne: (id: number) => import("..").Resource;
    findMany: (queryParams: import("..").QueryParams, loadMore?: boolean) => Promise<any>;
    save: (resource: import("..").Resource) => import("..").Resource;
    update: (resource: import("..").Resource) => import("..").Resource;
    create: (resource: import("..").Resource) => import("..").Resource;
    destroy: (id: number) => Promise<any>;
    updateMany: (ids: number[], data: import("..").Resource) => Promise<any>;
    deleteMany: (ids: number[]) => void;
    publish: (ids: number[]) => Promise<any>;
    unpublish: (id: number[]) => Promise<any>;
    addLinks: (id: number, contentType: string, data: number[]) => Promise<any>;
    removeLinks: (id: number, dataIds: number[]) => Promise<any>;
    addAttachment: (id: number, fieldName: string, attachmentId: number) => import("..").Resource;
    removeAttachment: (id: number, fieldName: string) => import("..").Resource;
    updatePositions: (sorted: import("..").Resource[]) => Promise<any>;
    query: any;
    setQuery: any;
    meta: Record<string, any>;
    page: number;
    perPage: number;
    totalCount: number;
    numPages: number;
    sort: (sortBy: string, sortDirection: "asc" | "desc") => Promise<any>;
    paginate: (page: number) => Promise<any>;
    loadMore: () => void;
    showModal: any;
    setShowModal: any;
};
export default useResourceContext;
